import com.amazonaws.auth.AWSCredentials
import com.amazonaws.auth.profile.ProfileCredentialsProvider

buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.amazonaws:aws-java-sdk:1.11.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.0"
    }
}

group = 'me.calebbassham'
version = '0.7.0'

apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: "com.github.johnrengelman.shadow"

repositories {
    mavenCentral()
    maven { url = "https://dl.bintray.com/darkpaladin/libs-release" }
    maven { url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url = "https://hub.spigotmc.org/nexus/content/groups/public/" }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        javaParameters = ["-parameters"]
    }
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compileOnly("ch.njol:skript:2.2-dev37c")
    compileOnly "org.spigotmc:spigot-api:1.8-R0.1-SNAPSHOT"
}

jar {
    from configurations.compile.collect { zipTree it }
    archiveName = "${baseName}.${extension}"
}

shadowJar {
    relocate "kotlin", "me.calebbassham.scenariomanager.kotlin"
    archiveName = "${baseName}.${extension}"
}

build.dependsOn shadowJar

publishing {
    publications {
        scenarioManager(MavenPublication) {
            from components.java
        }
    }

    repositories {
        try {
            maven {
                url = "s3://caleb-maven/"

                credentials(AwsCredentials) {
                    AWSCredentials awsCredentials = new ProfileCredentialsProvider("caleb").credentials

                    accessKey = awsCredentials.AWSAccessKeyId
                    secretKey = awsCredentials.AWSSecretKey
                }
            }
        } catch (Exception ignored) {

        }
    }
}